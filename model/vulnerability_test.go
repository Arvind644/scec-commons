package model

import (
	"encoding/json"
	"testing"

	"github.com/stretchr/testify/assert"
)

func TestVulnerability(t *testing.T) {
	cid2json := make(map[string]string, 0)

	jsonObj := []byte(`{
		"_key": "bafkreie4t6xqy65fsykdtbz5rcwjivii7rpapjq55zwnpnbl6uj6dysdbu",
		"name": "CVE-1823"
	  }`)

	expected := `{"name":"CVE-1823","objtype":"Vulnerability"}`

	var vuln2nft Vulnerability // define user object to marshal into

	json.Unmarshal(jsonObj, &vuln2nft) // convert json string into the user object
	vuln2nft.MarshalNFT(cid2json)      // generate the cid and nft json for user object
	// fmt.Printf("%s=%s\n", vuln2nft.Key, vuln2nft.NftJson)
	assert.Equal(t, expected, vuln2nft.NftJson, "check nft json against expected results")

	var nft2vuln Vulnerability // define user object to marshal into

	nft2vuln.NftJson = expected     // set the nft json
	nft2vuln.UnmarshalNFT(cid2json) // convert the json string into the user object
	nft2vuln.MarshalNFT(cid2json)   // recalcuate the cid and nft json for the new user object
	assert.Equal(t, expected, nft2vuln.NftJson, "check unmarshalled against expected results")

}
